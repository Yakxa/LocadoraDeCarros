// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteLocadoraDeCarros.Dal;

#nullable disable

namespace TesteLocadoraDeCarros.Dal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241006233015_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AluguelCarro", b =>
                {
                    b.Property<Guid>("AlugueisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarrosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlugueisId", "CarrosId");

                    b.HasIndex("CarrosId");

                    b.ToTable("AluguelCarro");
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Aluguel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContratoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ContratoId")
                        .IsUnique();

                    b.ToTable("Alugueis");
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Carro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxaAtraso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxaDiaria")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Carros");
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Contrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantidadeCarros")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxaTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("AluguelCarro", b =>
                {
                    b.HasOne("TesteLocadoraDeCarros.Domain.Aggregates.Aluguel", null)
                        .WithMany()
                        .HasForeignKey("AlugueisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteLocadoraDeCarros.Domain.Aggregates.Carro", null)
                        .WithMany()
                        .HasForeignKey("CarrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Aluguel", b =>
                {
                    b.HasOne("TesteLocadoraDeCarros.Domain.Aggregates.Cliente", "Cliente")
                        .WithMany("Alugueis")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteLocadoraDeCarros.Domain.Aggregates.Contrato", "Contrato")
                        .WithOne("Aluguel")
                        .HasForeignKey("TesteLocadoraDeCarros.Domain.Aggregates.Aluguel", "ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Cliente", b =>
                {
                    b.Navigation("Alugueis");
                });

            modelBuilder.Entity("TesteLocadoraDeCarros.Domain.Aggregates.Contrato", b =>
                {
                    b.Navigation("Aluguel")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
